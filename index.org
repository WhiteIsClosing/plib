#+STYLE: <link rel="stylesheet" type="text/css" href="./style/yinwang0.css" />

Very short Ruby tutorials for my YY.

* 安装和配置
** 安装
*** Windows
    前往 http://rubyinstaller.org/ 下载.
*** Mac OS && Linux
    已经自带, 可以使用 [[https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E7%BB%88%E7%AB%AF][终端]] 打开. 
** 基本的开发环境
   一个基本的开发环境包括两个部分:
   1. 编写程序的部分(编辑器)
   2. 执行程序的部分(解释器)
*** 编辑器的选择
    可以使用任何的[[https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8][文本编辑器]], 可以考虑的如下:
    1. 自带的记事本
    2. Notepad++: http://notepad-plus-plus.org/
    3. atom: https://atom.io/
    4. vim: http://www.vim.org/download.php
    5. emacs: http://mirror.keystealth.org/gnu/emacs/windows/
*** 解释器的说明
    解释器可以使用两种模式: 1. 交互模式. 2. 批处理模式
    两者的不同如下:
**** 交互模式
     使用irb, 进入后会有如下的显示:
#+begin_src bash
irb(main):001:0> 
#+end_src
     在这一模式下, 每写一行(敲回车后), 解释器都会立即执行. 这样, 每一步的执行的结果都可以知道.
**** 批处理模式
     使用 ruby 命令, 在Windows下, 编写文件后保存成.rb文件, 点击就会是批处理模式. 批处理模式会一次性执行.rb文件中的所有内容, 或者遇到文件中出现错误, 或者执行完毕, 也有可能会永远运行下去(你可以选择强行停止).
* 基本语法
  编程语言作为一门语言, 和普通的中文\英文等具有很多的相似点. 学习一门语言的过程都是一样的(认字->认词->学习语法->读文章->写文章), Ruby的字符都是英文字符, 不需要额外学习. Ruby中需要专门学习的词语也很少, 在100以内, 很多词语也是语法的组成部分之一, 所以语法是Ruby语言的基础.
** 表达式
   表达式可以认为是编程语言中的一句话. 可以认为是来自于数学表达式, 比如: $1+2, 3*14+2$ 等等. 

   表达式是一个表示运算的过程, 而其结果则是运算的目的, 可以写一个解一个一元二次方程的表达式, 如下, 我们来解 $x^2 + 4x + 1 = 0$ 这一方程两个解的表达式就是:
   $$x_1 = \frac{-4 + \sqrt{4^2 - 4\times 1\times 1}}{2}$$
   $$x_2 = \frac{-4 - \sqrt{4^2 - 4\times 1\times 1}}{2}$$

   如果我们需要使用Ruby来写出上面的两个表达式, 则需要注意以下几点:
   1. 乘法在Ruby中的形式为 1*2
   2. 除法在Ruby中的形式为 32/8
   3. 开平方的形式则为 Math.sqrt(3.5)
   4. 平方的形式则为 3**2 (3的平方)


   如此, 上面的两个表达式在Ruby中会是如下:
#+begin_src ruby
x1 = (-4+Math.sqrt(4**2 - 4*1*1) )/2
x2 = (-4-Math.sqrt(4**2 - 4*1*1) )/2
#+end_src
   如果将这两句话复制, 放入irb中分别执行, 结果会分别是
#+begin_src bash
irb(main):003:0> x1 = (-4+Math.sqrt(4**2 - 4*1*1) )/2
=> -0.2679491924311228
irb(main):004:0> x2 = (-4-Math.sqrt(4**2 - 4*1*1) )/2
=> -3.732050807568877
#+end_src
   你会发现, 每执行一句表达式, 表达式的结果都会在irb的模式中显示出来.

** 可以通用的表达式 - 变量
   解通项公式的方程
** 更加复杂的表达式 - 程序的流程
   不断的解方程
   判断方程无解的情况
** 处理复杂的表达式 - 模块化 - 函数/子例程/代码快/方法
** 逻辑的基石 - 类型系统
** 外界的交互 - IO系统
** 常用类型 - string
** 现实世界的投射 - 面向对象
** 乐高积木 - 模块化
** 编写自己的网站 - Rails
** Meta Programming
* Footnotes



